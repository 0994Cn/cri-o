// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/containers/image/types (interfaces: Image)

// Package imagetypesmock is a generated GoMock package.
package imagetypesmock

import (
	context "context"
	reference "github.com/containers/image/docker/reference"
	types "github.com/containers/image/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	reflect "reflect"
)

// MockImage is a mock of Image interface
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// ConfigBlob mocks base method
func (m *MockImage) ConfigBlob(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigBlob", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigBlob indicates an expected call of ConfigBlob
func (mr *MockImageMockRecorder) ConfigBlob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigBlob", reflect.TypeOf((*MockImage)(nil).ConfigBlob), arg0)
}

// ConfigInfo mocks base method
func (m *MockImage) ConfigInfo() types.BlobInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigInfo")
	ret0, _ := ret[0].(types.BlobInfo)
	return ret0
}

// ConfigInfo indicates an expected call of ConfigInfo
func (mr *MockImageMockRecorder) ConfigInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigInfo", reflect.TypeOf((*MockImage)(nil).ConfigInfo))
}

// EmbeddedDockerReferenceConflicts mocks base method
func (m *MockImage) EmbeddedDockerReferenceConflicts(arg0 reference.Named) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmbeddedDockerReferenceConflicts", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EmbeddedDockerReferenceConflicts indicates an expected call of EmbeddedDockerReferenceConflicts
func (mr *MockImageMockRecorder) EmbeddedDockerReferenceConflicts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmbeddedDockerReferenceConflicts", reflect.TypeOf((*MockImage)(nil).EmbeddedDockerReferenceConflicts), arg0)
}

// Inspect mocks base method
func (m *MockImage) Inspect(arg0 context.Context) (*types.ImageInspectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0)
	ret0, _ := ret[0].(*types.ImageInspectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect
func (mr *MockImageMockRecorder) Inspect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockImage)(nil).Inspect), arg0)
}

// LayerInfos mocks base method
func (m *MockImage) LayerInfos() []types.BlobInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayerInfos")
	ret0, _ := ret[0].([]types.BlobInfo)
	return ret0
}

// LayerInfos indicates an expected call of LayerInfos
func (mr *MockImageMockRecorder) LayerInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerInfos", reflect.TypeOf((*MockImage)(nil).LayerInfos))
}

// LayerInfosForCopy mocks base method
func (m *MockImage) LayerInfosForCopy(arg0 context.Context) ([]types.BlobInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayerInfosForCopy", arg0)
	ret0, _ := ret[0].([]types.BlobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LayerInfosForCopy indicates an expected call of LayerInfosForCopy
func (mr *MockImageMockRecorder) LayerInfosForCopy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerInfosForCopy", reflect.TypeOf((*MockImage)(nil).LayerInfosForCopy), arg0)
}

// Manifest mocks base method
func (m *MockImage) Manifest(arg0 context.Context) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manifest", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Manifest indicates an expected call of Manifest
func (mr *MockImageMockRecorder) Manifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifest", reflect.TypeOf((*MockImage)(nil).Manifest), arg0)
}

// OCIConfig mocks base method
func (m *MockImage) OCIConfig(arg0 context.Context) (*v1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OCIConfig", arg0)
	ret0, _ := ret[0].(*v1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OCIConfig indicates an expected call of OCIConfig
func (mr *MockImageMockRecorder) OCIConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OCIConfig", reflect.TypeOf((*MockImage)(nil).OCIConfig), arg0)
}

// Reference mocks base method
func (m *MockImage) Reference() types.ImageReference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reference")
	ret0, _ := ret[0].(types.ImageReference)
	return ret0
}

// Reference indicates an expected call of Reference
func (mr *MockImageMockRecorder) Reference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reference", reflect.TypeOf((*MockImage)(nil).Reference))
}

// Signatures mocks base method
func (m *MockImage) Signatures(arg0 context.Context) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signatures", arg0)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signatures indicates an expected call of Signatures
func (mr *MockImageMockRecorder) Signatures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signatures", reflect.TypeOf((*MockImage)(nil).Signatures), arg0)
}

// Size mocks base method
func (m *MockImage) Size() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size
func (mr *MockImageMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockImage)(nil).Size))
}

// UpdatedImage mocks base method
func (m *MockImage) UpdatedImage(arg0 context.Context, arg1 types.ManifestUpdateOptions) (types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedImage", arg0, arg1)
	ret0, _ := ret[0].(types.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatedImage indicates an expected call of UpdatedImage
func (mr *MockImageMockRecorder) UpdatedImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedImage", reflect.TypeOf((*MockImage)(nil).UpdatedImage), arg0, arg1)
}

// UpdatedImageNeedsLayerDiffIDs mocks base method
func (m *MockImage) UpdatedImageNeedsLayerDiffIDs(arg0 types.ManifestUpdateOptions) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedImageNeedsLayerDiffIDs", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdatedImageNeedsLayerDiffIDs indicates an expected call of UpdatedImageNeedsLayerDiffIDs
func (mr *MockImageMockRecorder) UpdatedImageNeedsLayerDiffIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedImageNeedsLayerDiffIDs", reflect.TypeOf((*MockImage)(nil).UpdatedImageNeedsLayerDiffIDs), arg0)
}
