// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/cri-o/pkg/storage (interfaces: ImageServer)

// Package criostoragemock is a generated GoMock package.
package criostoragemock

import (
	copy "github.com/containers/image/copy"
	types "github.com/containers/image/types"
	storage "github.com/containers/storage"
	storage0 "github.com/cri-o/cri-o/pkg/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockImageServer is a mock of ImageServer interface
type MockImageServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageServerMockRecorder
}

// MockImageServerMockRecorder is the mock recorder for MockImageServer
type MockImageServerMockRecorder struct {
	mock *MockImageServer
}

// NewMockImageServer creates a new mock instance
func NewMockImageServer(ctrl *gomock.Controller) *MockImageServer {
	mock := &MockImageServer{ctrl: ctrl}
	mock.recorder = &MockImageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageServer) EXPECT() *MockImageServerMockRecorder {
	return m.recorder
}

// GetStore mocks base method
func (m *MockImageServer) GetStore() storage.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(storage.Store)
	return ret0
}

// GetStore indicates an expected call of GetStore
func (mr *MockImageServerMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockImageServer)(nil).GetStore))
}

// ImageStatus mocks base method
func (m *MockImageServer) ImageStatus(arg0 *types.SystemContext, arg1 string) (*storage0.ImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageStatus", arg0, arg1)
	ret0, _ := ret[0].(*storage0.ImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageStatus indicates an expected call of ImageStatus
func (mr *MockImageServerMockRecorder) ImageStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageStatus", reflect.TypeOf((*MockImageServer)(nil).ImageStatus), arg0, arg1)
}

// ListImages mocks base method
func (m *MockImageServer) ListImages(arg0 *types.SystemContext, arg1 string) ([]storage0.ImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", arg0, arg1)
	ret0, _ := ret[0].([]storage0.ImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages
func (mr *MockImageServerMockRecorder) ListImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockImageServer)(nil).ListImages), arg0, arg1)
}

// PrepareImage mocks base method
func (m *MockImageServer) PrepareImage(arg0 string, arg1 *copy.Options) (types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareImage", arg0, arg1)
	ret0, _ := ret[0].(types.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareImage indicates an expected call of PrepareImage
func (mr *MockImageServerMockRecorder) PrepareImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareImage", reflect.TypeOf((*MockImageServer)(nil).PrepareImage), arg0, arg1)
}

// PullImage mocks base method
func (m *MockImageServer) PullImage(arg0 *types.SystemContext, arg1 string, arg2 *copy.Options) (types.ImageReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.ImageReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullImage indicates an expected call of PullImage
func (mr *MockImageServerMockRecorder) PullImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockImageServer)(nil).PullImage), arg0, arg1, arg2)
}

// RemoveImage mocks base method
func (m *MockImageServer) RemoveImage(arg0 *types.SystemContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage
func (mr *MockImageServerMockRecorder) RemoveImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockImageServer)(nil).RemoveImage), arg0, arg1)
}

// ResolveNames mocks base method
func (m *MockImageServer) ResolveNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveNames indicates an expected call of ResolveNames
func (mr *MockImageServerMockRecorder) ResolveNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNames", reflect.TypeOf((*MockImageServer)(nil).ResolveNames), arg0)
}

// UntagImage mocks base method
func (m *MockImageServer) UntagImage(arg0 *types.SystemContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntagImage indicates an expected call of UntagImage
func (mr *MockImageServerMockRecorder) UntagImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagImage", reflect.TypeOf((*MockImageServer)(nil).UntagImage), arg0, arg1)
}
